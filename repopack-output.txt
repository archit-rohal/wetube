This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-02T19:56:34.977Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  index.html
  manifest.json
  robots.txt
src/
  components/
    AppLayout.js
    Body.js
    Button.js
    ButtonList.js
    ChatMessage.js
    Comment.js
    CommentsContainer.js
    CommentsList.js
    Head.js
    InfiniteScrollComponent.js
    LiveChat.js
    MainContainer.js
    SearchResults.js
    Sidebar.js
    VideoCard.js
    VideoContainer.js
    WatchPage.js
  utils/
    appSlice.js
    chatSlice.js
    constants.js
    helper.js
    listOfButtons.js
    searchResultsSlice.js
    searchSlice.js
    store.js
    timeUtils.js
    trendingVideosSlice.js
    useFetchAndPaginateComments.js
    useFetchPaginatedVideos.js
    useSearchSuggestions.js
    viewCount.js
  App.css
  App.js
  index.css
  index.js
  logo.svg
  reportWebVitals.js
  server.js
  setupTests.js
.gitignore
package.json
README.md
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: src/components/AppLayout.js
================
import React from 'react'
import Head from "./Head";
import Body from "./Body";

const AppLayout = () => {
    return (
        <div>
            <Head/>
            <Body/>
        </div>
    )
}
export default AppLayout

================
File: src/components/Body.js
================
import React from "react";
import Sidebar from "./Sidebar";
import { Outlet } from "react-router-dom";

const Body = () => {
  return (
    <div className="flex">
      <Sidebar />
      <Outlet />
    </div>
  );
};

export default Body;

================
File: src/components/Button.js
================
import React from "react";

const Button = ({ name }) => {
  return (
    <div>
      <button className="px-5 m-2 py-2 bg-gray-100 rounded-lg">{name}</button>
    </div>
  );
};

export default Button;

================
File: src/components/ButtonList.js
================
import React from "react";
import Button from "./Button";
import {list} from '../utils/listOfButtons'

const ButtonList = () => {
  return (
    <div className="flex">
      {list.map((item) => (
        <Button key={item} name={item}></Button>
      ))}
    </div>
  );
};

export default ButtonList;

================
File: src/components/ChatMessage.js
================
import React from 'react'

const ChatMessage = ({name, message}) => {
    return (
        <div className="flex items-center shadow-sm p-2">
            <img
                alt="user"
                className="h-8"
                src="https://cdn-icons-png.flaticon.com/512/1144/1144760.png"
            />
            <span className="font-bold px-2">{name}</span>
            <span>{message}</span>
        </div>
    )
}
export default ChatMessage

================
File: src/components/Comment.js
================
import React from 'react'
import {getTimeElapsed} from "../utils/timeUtils";

const Comment = ({data}) => {
    // const {name, text, replies} = data;
    const {
        snippet: {
            topLevelComment: {
                snippet: {
                    authorDisplayName,
                    authorProfileImageUrl,
                    likeCount,
                    publishedAt,
                    textDisplay
                }
            }
        }
    } = data;
    return (
        <div className="flex shadow-sm bg-gray-100 p-2 rounded-lg my-2">
            <img className="w-12 h-12 rounded-full" src={authorProfileImageUrl}
                 alt="comment-profile-pic"/>
            <div className="px-3">
                <div className="flex items-center">
                    <p className="font-bold text-sm tracking-wide">{authorDisplayName}</p>
                    <span className="ml-1 text-sm text-gray-800">{getTimeElapsed(publishedAt)}</span>
                </div>
                <p className="mt-2">{textDisplay}</p>
                <figure className="flex items-center space-x-5 mt-2">
                    <img src="https://cdn.pixabay.com/photo/2013/07/13/12/15/hand-159474_1280.png" height="15px"
                         width="16px" alt="thumbs-up-image"/>
                    <span>{likeCount}</span>
                    <img
                        src="https://www.freeiconspng.com/thumbs/youtube-dislike-png/black-and-white-youtube-dislike-21.png"
                        height="15px" width="16px" alt="thumbs-down-image" className="ml-5"/>
                </figure>
            </div>
        </div>
    )
}
export default Comment

================
File: src/components/CommentsContainer.js
================
import React from 'react'
import CommentsList from "./CommentsList";
import useFetchAndPaginateComments from "../utils/useFetchAndPaginateComments";
import {useSearchParams} from "react-router-dom";

const commentsData = [
    {
        name: "Archit Rohal",
        text: "Lorem ipsum dolor sit amet, connectetur adip",
        replies: []
    },
    {
        name: "Archit Rohal",
        text: "Lorem ipsum dolor sit amet, connectetur adip",
        replies: [
            {
                name: "Archit Rohal",
                text: "Lorem ipsum dolor sit amet, connectetur adip",
                replies: []
            },
            {
                name: "Archit Rohal",
                text: "Lorem ipsum dolor sit amet, connectetur adip",
                replies: [
                    {
                        name: "Archit Rohal",
                        text: "Lorem ipsum dolor sit amet, connectetur adip",
                        replies: [
                            {
                                name: "Archit Rohal",
                                text: "Lorem ipsum dolor sit amet, connectetur adip",
                                replies: [
                                    {
                                        name: "Archit Rohal",
                                        text: "Lorem ipsum dolor sit amet, connectetur adip",
                                        replies: []
                                    },
                                    {
                                        name: "Archit Rohal",
                                        text: "Lorem ipsum dolor sit amet, connectetur adip",
                                        replies: [
                                            {
                                                name: "Archit Rohal",
                                                text: "Lorem ipsum dolor sit amet, connectetur adip",
                                                replies: []
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },

        ]
    },
    {
        name: "Archit Rohal",
        text: "Lorem ipsum dolor sit amet, connectetur adip",
        replies: []
    },
    {
        name: "Archit Rohal",
        text: "Lorem ipsum dolor sit amet, connectetur adip",
        replies: []
    },
    {
        name: "Archit Rohal",
        text: "Lorem ipsum dolor sit amet, connectetur adip",
        replies: []
    },
    {
        name: "Archit Rohal",
        text: "Lorem ipsum dolor sit amet, connectetur adip",
        replies: []
    }
]


const CommentsContainer = () => {
    const [searchParams] = useSearchParams();
    const videoId = searchParams.get("v");
    console.log(videoId);


    const videoComments = useFetchAndPaginateComments(videoId);
    console.log("here is video comments: ", videoComments);

    return (
        <div className="m-5 p-2">
            <h1 className="text-2xl font-bold">Comments</h1>
            <CommentsList comments={videoComments}/>
        </div>
    )
}

export default CommentsContainer

================
File: src/components/CommentsList.js
================
import React from 'react'
import Comment from "./Comment";

const CommentsList = ({comments}) => {
    console.log("comments from commentsList: ", comments);

    return (
        <div>
            {comments?.map((comment, index) => (
                <div key={index}>
                    <Comment data={comment}/>
                    <div className="pl-5 border border-l-black ml-5">
                        <CommentsList comments={comment.replies}/>
                    </div>
                </div>
            ))}
        </div>
    )
}
export default CommentsList

================
File: src/components/Head.js
================
import React, {useRef, useState} from "react";
import {useDispatch} from "react-redux";
import {toggleMenu} from "../utils/appSlice";
import {useNavigate} from "react-router-dom";
import useSearchSuggestions from "../utils/useSearchSuggestions";

const Head = () => {
    const [searchQuery, setSearchQuery] = useState("");
    const [showSuggestions, setShowSuggestions] = useState(false);

    const dispatch = useDispatch();
    const navigate = useNavigate();
    const inputRef = useRef(null);

    const autocompleteSuggestions = useSearchSuggestions(searchQuery);

    return (
        <div className="grid grid-flow-col p-5 m-2 shadow-lg">
            <div className="flex col-span-1">
                <img
                    onClick={() => dispatch(toggleMenu())}
                    alt="menu"
                    className="h-8 cursor-pointer"
                    src="https://icons.veryicon.com/png/o/miscellaneous/linear-icon-45/hamburger-menu-4.png"
                />
                <a href="/">
                    <img
                        alt="youtube-logo"
                        className="h-8 mx-2"
                        src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Logo_of_YouTube_%282015-2017%29.svg/1280px-Logo_of_YouTube_%282015-2017%29.svg.png"
                    />
                </a>
            </div>
            <form className="col-span-10 px-10" onSubmit={(e) => {
                e.preventDefault();
                navigate(`/results?search_query=${searchQuery}`);
                setShowSuggestions(false);
                if (inputRef.current) {
                    inputRef.current.blur();
                }
            }}>
                <input
                    className="w-1/2 border border-gray-400 px-5 p-2 rounded-l-full"
                    type="text"
                    value={searchQuery}
                    onChange={e => setSearchQuery(e.target.value)}
                    onFocus={() => setShowSuggestions(true)}
                    onBlur={() => setShowSuggestions(false)}
                    ref={inputRef}
                />
                <button className="border border-gray-400 p-2 rounded-r-full px-5 py-2 bg-gray-100">
                    🔍
                </button>
            </form>
            {showSuggestions && (<div
                className="fixed bg-white py-2 px-2 w-[43rem] left-[19rem] top-[5rem] shadow-lg rounded-lg border border-gray-100">
                <ul>
                    {autocompleteSuggestions?.map(s => (
                        <li key={s} className="py-2 px-3 shadow-sm hover:bg-gray-100"
                            onMouseDown={() => navigate(`/results?search_query=${s}`)}>🔍 {s}</li>
                    ))}
                </ul>
            </div>)}
            <div className="col-span-1">
                <img
                    alt="user-logo"
                    className="h-8"
                    src="https://cdn-icons-png.flaticon.com/512/1144/1144760.png"
                />
            </div>
            <button onClick={() => navigate(`/infinite`)} className="bg-teal-500">Go to infinite</button>
        </div>
    );
};

export default Head;

================
File: src/components/InfiniteScrollComponent.js
================
import React, {useEffect, useState} from 'react';
import {YOUTUBE_COMMENTS_API} from "../utils/constants";
import CommentsList from "./CommentsList";

const InfiniteScrollComponent = () => {
    const [comments, setComments] = useState([]);
    const getInitialComments = async () => {
        try {
            const data = await fetch(`${YOUTUBE_COMMENTS_API}`);
            if (data.status !== 200) {
                throw new Error(`fetch api call failed`)
            }
            const json = await data.json();
            setComments(json.items);
        } catch (e) {
            console.error(e);
        }
    }
    console.log(comments);

    useEffect(() => {
        getInitialComments();
    }, []);
    return (
        <div>
            <h1 className="text-2xl font-bold">Comments</h1>
        </div>
    );
};

export default InfiniteScrollComponent;

================
File: src/components/LiveChat.js
================
import React, {useEffect, useState} from 'react'
import ChatMessage from "./ChatMessage";
import {useDispatch, useSelector} from "react-redux";
import {addMessage} from "../utils/chatSlice";
import {generateRandomNames, makeRandomMessage} from "../utils/helper";

const LiveChat = () => {
    const dispatch = useDispatch();
    const chatMessages = useSelector(store => store.chat.messages);
    const [liveMessage, setLiveMessage] = useState("");

    useEffect(() => {
        const i = setInterval(() => {
            dispatch(addMessage({
                name: generateRandomNames(),
                message: makeRandomMessage(20),
            }))
        }, 1000);
        return () => clearInterval(i);
    }, []);
    return (
        <>
            <div
                className="w-full h-[600px] ml-2 p-2 border border-black bg-slate-100 rounded-lg overflow-y-scroll flex flex-col-reverse">
                <div>
                    {chatMessages?.map((c, i) => (
                        <div key={i}>
                            <ChatMessage name={c.name} message={c.message}/>
                        </div>
                    ))}
                </div>
            </div>
            <form className="w-full p-2 ml-2 border border-black flex items-center" onSubmit={(e) => {
                e.preventDefault();
                dispatch(addMessage({
                    name: "Archit",
                    message: liveMessage
                }))
                setLiveMessage("");
            }}>
                <input className="flex-grow px-2 border border-gray-500 rounded" type="text" value={liveMessage}
                       onChange={(e) => setLiveMessage(e.target.value)}/>
                <button className="px-2 mx-4 bg-blue-300 w-20 rounded-lg" type="submit">Send</button>
            </form>
        </>
    )
}
export default LiveChat

================
File: src/components/MainContainer.js
================
import React from "react";
import ButtonList from "./ButtonList";
import VideoContainer from "./VideoContainer";

const MainContainer = () => {
  return (
    <div className="">
      <ButtonList />
      <VideoContainer />
    </div>
  );
};

export default MainContainer;

================
File: src/components/SearchResults.js
================
import React from 'react';
import {Link, useSearchParams} from "react-router-dom";
import {getTimeElapsed} from "../utils/timeUtils";
import {useSelector} from "react-redux";
import useFetchPaginatedVideos from "../utils/useFetchPaginatedVideos";

const SearchResults = () => {
    const [searchParams] = useSearchParams();
    const searchTerm = searchParams.get("search_query");
    const searchResultsArray = useSelector(store => store.searchResults.searchResponse);

    useFetchPaginatedVideos(searchTerm);

    console.log("search results array: ", searchResultsArray);


    return (
        <div>
            <div className="px-5">
                {searchResultsArray?.map(item => {
                    const {
                        id: {videoId},
                        snippet: {
                            title,
                            description,
                            channelTitle,
                            publishedAt,
                            liveBroadcastContent,
                            thumbnails: {high: {url, width, height}}
                        }
                    } = item;
                    return (
                        <Link to={"/watch?v=" + videoId} key={videoId}>
                            <div className="px-5 py-4 flex">
                                <div className="mr-5">
                                    <img src={url} alt="search-item-thumbnail"
                                         height={height}
                                         width={width}
                                         className="rounded-lg"/>
                                </div>
                                <div>
                                    <h4 className="text-xl font-medium">{title}</h4>
                                    <p className="text-gray-500 pl-2">{getTimeElapsed(publishedAt)}</p>
                                    <p className="text-gray-600">🔴 {channelTitle} ✔</p>
                                    <p className="text-gray-600 text-wrap">{description}</p>
                                    {liveBroadcastContent === "live" && <img
                                        src={"https://img.freepik.com/premium-vector/youtube-live-stream-icon-red-black_609989-1411.jpg"}
                                        alt="live-image" height="20px" width="60px"/>}
                                </div>
                            </div>
                        </Link>
                    );
                })}
            </div>
        </div>
    );
};

export default SearchResults;

================
File: src/components/Sidebar.js
================
import React from "react";
import { useSelector } from "react-redux";
import { Link } from "react-router-dom";

const Sidebar = () => {
  const isMenuOpen = useSelector((store) => store.app.isMenuOpen);
  if (!isMenuOpen) return null;
  return (
    <div className="p-5 shadow-lg w-48">
      <ul>
        <li>
          <Link to="/">Home</Link>
        </li>
        <li>Shorts</li>
        <li>Videos</li>
        <li>Live</li>
      </ul>
      <h1 className="font-bold pt-5">Subscriptions</h1>
      <ul>
        <li>Music</li>
        <li>Sports</li>
        <li>Gaming</li>
        <li>Movies</li>
      </ul>
      <h1 className="font-bold pt-5">Watch later</h1>
      <ul>
        <li>Music</li>
        <li>Sports</li>
        <li>Gaming</li>
        <li>Movies</li>
      </ul>
    </div>
  );
};

export default Sidebar;

================
File: src/components/VideoCard.js
================
import React from "react";
import {formatViewCount} from "../utils/viewCount";

const VideoCard = ({info}) => {
    const {snippet, statistics} = info;
    const {channelTitle, title, thumbnails} = snippet;

    return (
        <div className="p-2 m-2 w-72 shadow-lg">
            <img className="rounded-lg" src={thumbnails.medium.url} alt="thumbnail"/>
            <ul>
                <li className="font-bold py-2">{title}</li>
                <li>{channelTitle}</li>
                <li>{formatViewCount(statistics.viewCount)} views</li>
            </ul>
        </div>
    );
};

export default VideoCard;

================
File: src/components/VideoContainer.js
================
import {useSelector} from "react-redux";
import {Link} from "react-router-dom";
import VideoCard from "./VideoCard";
import useFetchPaginatedVideos from "../utils/useFetchPaginatedVideos";

const VideoContainer = () => {
    const mostPopularVideos = useSelector(store => store.trendingVideos.videos);

    useFetchPaginatedVideos();


    if (!mostPopularVideos.length) return <div>Shimmer</div>;

    return (
        <div className="flex flex-wrap">
            {mostPopularVideos?.map((video) => (
                <Link key={video.id} to={"/watch?v=" + video.id}>
                    <VideoCard info={video}/>
                </Link>
            ))}
        </div>
    );
};

export default VideoContainer;

================
File: src/components/WatchPage.js
================
import React, {useEffect} from "react";
import {useDispatch} from "react-redux";
import {closeMenu} from "../utils/appSlice";
import {useSearchParams} from "react-router-dom";
import CommentsContainer from "./CommentsContainer";
import LiveChat from "./LiveChat";

const WatchPage = () => {
    const [searchParams] = useSearchParams();
    const dispatch = useDispatch();

    useEffect(() => {
        dispatch(closeMenu());
    });

    return (
        <div className="flex flex-col w-full">
            <div className="px-5 flex w-full">
                <div>
                    <iframe
                        width="1200"
                        height="600"
                        src={"https://www.youtube.com/embed/" + searchParams.get("v")}
                        title="YouTube video player"
                        frameBorder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                        referrerPolicy="strict-origin-when-cross-origin"
                        allowFullScreen
                    ></iframe>
                </div>
                <div className="w-full">
                    <LiveChat/>
                </div>
            </div>
            <CommentsContainer/>
        </div>
    )
        ;
};

export default WatchPage;

================
File: src/utils/appSlice.js
================
import { createSlice } from "@reduxjs/toolkit";

const appSlice = createSlice({
  name: "app",
  initialState: {
    isMenuOpen: true,
  },
  reducers: {
    toggleMenu: (state, action) => {
      state.isMenuOpen = !state.isMenuOpen;
    },
    closeMenu: (state, action) => {
      state.isMenuOpen = false;
    }
  },
});

export const { toggleMenu, closeMenu } = appSlice.actions;
export default appSlice.reducer;

================
File: src/utils/chatSlice.js
================
import {createSlice} from "@reduxjs/toolkit";
import {OFFSET_LIVE_CHAT} from "./constants";

const chatSlice = createSlice({
    name: 'chat',
    initialState: {
        messages: []
    },
    reducers: {
        addMessage: (state, action) => {
            state.messages.splice(OFFSET_LIVE_CHAT, 1);
            state.messages.push(action.payload);
        }
    }
})

export const {addMessage} = chatSlice.actions;
export default chatSlice.reducer;

================
File: src/utils/constants.js
================
// export const GOOGLE_API_KEY = "AIzaSyBUagqKvqGwJZdszxu-DG7PVlTHjByECmM";

// export const GOOGLE_API_KEY = "AIzaSyDYDj8HiIJtcwepyJBESow6i0F_-qoWex0";

export const GOOGLE_API_KEY = "AIzaSyCERZDyfPzmGEjhw2XtAYoTxzgYBw4zfy4"

export const YOUTUBE_VIDEOS_API =
    "https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=50&regionCode=IN&key=" +
    GOOGLE_API_KEY;

export const YOUTUBE_SEARCH_API =
    "http://suggestqueries.google.com/complete/search?client=firefox&ds=yt&q=";

// export const YOUTUBE_SEARCH_API="https://api.allorigins.win/raw?url=http://suggestqueries.google.com/complete/search?client=firefox&ds=yt&q="

// export const YOUTUBE_SEARCH_RESULTS_API = "https://www.googleapis.com/youtube/v3/search";

export const YOUTUBE_SEARCH_RESULTS_API = "https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=20&q=";

// + SEARCH_TEXT + "&type=video&key=" + GOOGLE_API_KEY;

export const OFFSET_LIVE_CHAT = 20;

// yt search results api (replace api key at the end) = "https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=UCvjgXvBlbQiydffZU7m1_aw&order=date&type=video&key=AIzaSyCERZDyfPzmGEjhw2XtAYoTxzgYBw4zfy4"

// youtube live streaming details api (replace api key and video id ) = "https://www.googleapis.com/youtube/v3/videos?part=liveStreamingDetails,snippet&id=jfKfPfyJRdk&key=AIzaSyCERZDyfPzmGEjhw2XtAYoTxzgYBw4zfy4"

// export const NEXT_PAGE_SEARCH_RESULTS = `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=20&type=video&key=${GOOGLE_API_KEY}&q=${searchTerm}&pageToken=${nextPageTokenRef.current}`;
// &q=click&pageToken=CBQQAA

export const NEXT_PAGE_SEARCH_RESULTS_URL = (searchTerm, pageToken) =>
    `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=20&type=video&key=${GOOGLE_API_KEY}&q=${searchTerm}&pageToken=${pageToken}`;

export const nextPopularVideosURL = `https://youtube.googleapis.com/youtube/v3/videos&part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=50&regionCode=IN&key=AIzaSyCERZDyfPzmGEjhw2XtAYoTxzgYBw4zfy4?`

// https://youtube.googleapis.com/youtube/v3/videos?pageToken=${nextPageTokenRef.current}&part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=50&regionCode=IN&key=AIzaSyCERZDyfPzmGEjhw2XtAYoTxzgYBw4zfy4
// `https://youtube.googleapis.com/youtube/v3/videos?pageToken=${nextPageTokenRef.current}&part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=50&regionCode=IN&key=${GOOGLE_API_KEY}`

// In constants.js
export const NEXT_PAGE_POPULAR_VIDEOS_URL = (nextPageToken) =>
    `https://youtube.googleapis.com/youtube/v3/videos?pageToken=${nextPageToken}&part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=50&regionCode=IN&key=${GOOGLE_API_KEY}`;


export const YOUTUBE_SEARCH_RESULTS_URL = (searchTerm) =>
    `${YOUTUBE_SEARCH_RESULTS_API}${searchTerm}&type=video&key=${GOOGLE_API_KEY}`;

export const YOUTUBE_COMMENTS_API = (videoId, pageToken) => `https://www.googleapis.com/youtube/v3/commentThreads?key=${GOOGLE_API_KEY}&textFormat=plainText&part=snippet,replies&videoId=${videoId}&maxResults=50`

================
File: src/utils/helper.js
================
const nameList = [
    'Time', 'Past', 'Future', 'Dev',
    'Fly', 'Flying', 'Soar', 'Soaring', 'Power', 'Falling',
    'Fall', 'Jump', 'Cliff', 'Mountain', 'Rend', 'Red', 'Blue',
    'Green', 'Yellow', 'Gold', 'Demon', 'Demonic', 'Panda', 'Cat',
    'Kitty', 'Kitten', 'Zero', 'Memory', 'Trooper', 'XX', 'Bandit',
    'Fear', 'Light', 'Glow', 'Tread', 'Deep', 'Deeper', 'Deepest',
    'Mine', 'Your', 'Worst', 'Enemy', 'Hostile', 'Force', 'Video',
    'Game', 'Donkey', 'Mule', 'Colt', 'Cult', 'Cultist', 'Magnum',
    'Gun', 'Assault', 'Recon', 'Trap', 'Trapper', 'Redeem', 'Code',
    'Script', 'Writer', 'Near', 'Close', 'Open', 'Cube', 'Circle',
    'Geo', 'Genome', 'Germ', 'Spaz', 'Shot', 'Echo', 'Beta', 'Alpha',
    'Gamma', 'Omega', 'Seal', 'Squid', 'Money', 'Cash', 'Lord', 'King',
    'Duke', 'Rest', 'Fire', 'Flame', 'Morrow', 'Break', 'Breaker', 'Numb',
    'Ice', 'Cold', 'Rotten', 'Sick', 'Sickly', 'Janitor', 'Camel', 'Rooster',
    'Sand', 'Desert', 'Dessert', 'Hurdle', 'Racer', 'Eraser', 'Erase', 'Big',
    'Small', 'Short', 'Tall', 'Sith', 'Bounty', 'Hunter', 'Cracked', 'Broken',
    'Sad', 'Happy', 'Joy', 'Joyful', 'Crimson', 'Destiny', 'Deceit', 'Lies',
    'Lie', 'Honest', 'Destined', 'Bloxxer', 'Hawk', 'Eagle', 'Hawker', 'Walker',
    'Zombie', 'Sarge', 'Capt', 'Captain', 'Punch', 'One', 'Two', 'Uno', 'Slice',
    'Slash', 'Melt', 'Melted', 'Melting', 'Fell', 'Wolf', 'Hound',
    'Legacy', 'Sharp', 'Dead', 'Mew', 'Chuckle', 'Bubba', 'Bubble', 'Sandwich', 'Smasher', 'Extreme', 'Multi', 'Universe', 'Ultimate', 'Death', 'Ready', 'Monkey', 'Elevator', 'Wrench', 'Grease', 'Head', 'Theme', 'Grand', 'Cool', 'Kid', 'Boy', 'Girl', 'Vortex', 'Paradox'
];

export function generateRandomNames() {
    return nameList[Math.floor(Math.random() * nameList.length)];
}

export function makeRandomMessage(length) {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    let counter = 0;
    while (counter < length) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
        counter += 1;
    }
    return result;
}

================
File: src/utils/listOfButtons.js
================
export const list = [
  "All",
  "Gaming",
  "Songs",
  "Live",
  "Soccer",
  "Cricket",
  "Cooking",
  "Valentines",
  "Motivation",
  "Sitcoms",
  "Game shows",
  "Technology",
];

================
File: src/utils/searchResultsSlice.js
================
import {createSlice} from "@reduxjs/toolkit";

const searchResultsSlice = createSlice({
    name: "searchResults",
    initialState: {
        searchResponse: [],
    },
    reducers: {
        addSearchResponse: (state, action) => {
            const newVideos = action.payload;
            const allVideos = [...state.searchResponse, ...newVideos];
            state.searchResponse = allVideos.reduce((acc, video) => {
                if (!acc.some(item => item.id.videoId === video.id.videoId)) {
                    acc.push(video);
                }
                return acc;
            }, []);
        },
    }
})

export const {addSearchResponse} = searchResultsSlice.actions;
export default searchResultsSlice.reducer;

================
File: src/utils/searchSlice.js
================
import {createSlice} from "@reduxjs/toolkit"

const searchSlice = createSlice({
    name: "search",
    initialState: {},
    reducers: {
        cacheResults: (state, action) => {
            // state = Object.assign(state, action.payload); this is also valid
            return {...state, ...action.payload}
        },
    },
})

export const {cacheResults} = searchSlice.actions;
export default searchSlice.reducer;

================
File: src/utils/store.js
================
import {configureStore} from "@reduxjs/toolkit";
import appSlice from "./appSlice";
import searchSlice from "./searchSlice";
import chatSlice from "./chatSlice";
import trendingVideosSlice from "./trendingVideosSlice";
import searchResultsSlice from "./searchResultsSlice";

const store = configureStore({
    reducer: {
        app: appSlice,
        search: searchSlice,
        chat: chatSlice,
        trendingVideos: trendingVideosSlice,
        searchResults: searchResultsSlice,
    },
});

export default store;

================
File: src/utils/timeUtils.js
================
export const getTimeElapsed = (publishTime) => {
    const now = new Date();
    const publishedDate = new Date(publishTime);
    const diffInSeconds = Math.floor((now - publishedDate) / 1000);

    const units = [
        { name: "year", seconds: 31536000 },
        { name: "month", seconds: 2592000 },
        { name: "week", seconds: 604800 },
        { name: "day", seconds: 86400 },
        { name: "hour", seconds: 3600 },
    ];

    for (const unit of units) {
        const quotient = Math.floor(diffInSeconds / unit.seconds);
        if (quotient >= 1) {
            return `${quotient} ${unit.name}${quotient > 1 ? "s" : ""} ago`;
        }
    }

    return "just now";
};

================
File: src/utils/trendingVideosSlice.js
================
import {createSlice} from "@reduxjs/toolkit";

const trendingVideosSlice = createSlice({
    name: 'trendingVideos',
    initialState: {
        videos: [],
    },
    reducers: {
        addVideos: (state, action) => {
            state.videos.push(...action.payload);
        }
    }

})

export const {addVideos} = trendingVideosSlice.actions;
export default trendingVideosSlice.reducer;

================
File: src/utils/useFetchAndPaginateComments.js
================
import {useEffect, useRef, useState} from "react";
import {YOUTUBE_COMMENTS_API} from "./constants";

const useFetchAndPaginateComments = (videoId) => {
    const [comments, setComments] = useState([]);
    const useNextPageTokenRef = useRef("");
    console.log("here is nextPageTokenRef: ", useNextPageTokenRef.current);


    const getInitialComments = async () => {
        try {
            const data = await fetch(`${YOUTUBE_COMMENTS_API(videoId)}`);
            if (data.ok) {
                const json = await data.json();
                console.log("comments json: ", json);
                setComments(json.items);
                useNextPageTokenRef.current = json.nextPageToken;
            }
        } catch (e) {
            console.error(e);
        }
    }

    useEffect(() => {
        getInitialComments();
    }, []);
    return comments;
}

export default useFetchAndPaginateComments;

================
File: src/utils/useFetchPaginatedVideos.js
================
import {
    NEXT_PAGE_POPULAR_VIDEOS_URL,
    YOUTUBE_SEARCH_RESULTS_URL,
    NEXT_PAGE_SEARCH_RESULTS_URL, YOUTUBE_VIDEOS_API,
} from "./constants";
import {addVideos} from "./trendingVideosSlice";
import {addSearchResponse} from "./searchResultsSlice";
import {useDispatch} from "react-redux";
import {useEffect, useRef} from "react";

const useFetchPaginatedVideos = (searchTerm) => {
    const dispatch = useDispatch();

    const totalResultsRef = useRef(0);
    const nextPageTokenRef = useRef("");
    const videosLengthRef = useRef(0);

    let isFetching = false;

    const getInitialVideos = async () => {
        try {
            const data = await fetch(
                searchTerm
                    ? YOUTUBE_SEARCH_RESULTS_URL(searchTerm)
                    : YOUTUBE_VIDEOS_API
            );
            if (!data.ok) {
                throw new Error(data.status);
            }
            const json = await data.json();
            totalResultsRef.current = json.pageInfo.totalResults;
            nextPageTokenRef.current = json.nextPageToken;
            videosLengthRef.current = json.items.length;
            if (searchTerm) {
                dispatch(addSearchResponse(json.items));
            } else {
                dispatch(addVideos(json.items));
            }
        } catch (e) {
            console.error(e);
        }
    };

    const getNextPageVideos = async () => {
        try {
            const data = await fetch(
                searchTerm
                    ? NEXT_PAGE_SEARCH_RESULTS_URL(searchTerm, nextPageTokenRef.current)
                    : NEXT_PAGE_POPULAR_VIDEOS_URL(nextPageTokenRef.current)
            );
            if (!data.ok) {
                throw new Error("Failed to fetch next page results");
            }
            const json = await data.json();
            nextPageTokenRef.current = json.nextPageToken;
            videosLengthRef.current += json.items.length;
            if (searchTerm) {
                dispatch(addSearchResponse(json.items));
            } else {
                dispatch(addVideos(json.items));
            }
        } catch (e) {
            console.error(e);
        }
    };

    function handleScroll() {
        // Guard clause - return early if already fetching
        if (isFetching) return;

        // Calculate scroll position
        const buffer = 100; // pixels before bottom to trigger load
        const atBottom =
            window.innerHeight + window.scrollY >=
            document.documentElement.scrollHeight - buffer;

        // Return if not at bottom or no more results to fetch
        if (!atBottom || videosLengthRef.current >= totalResultsRef.current) return;

        // Start fetch and reset flag when done
        isFetching = true;
        getNextPageVideos().finally(() => {
            isFetching = false;
        });
    }

    useEffect(() => {
        totalResultsRef.current = 0;
        nextPageTokenRef.current = "";
        videosLengthRef.current = 0;
        getInitialVideos();
        window.addEventListener("scroll", handleScroll);
        return () => window.removeEventListener("scroll", handleScroll);
    }, [searchTerm]);
};

export default useFetchPaginatedVideos;

================
File: src/utils/useSearchSuggestions.js
================
import {cacheResults} from "./searchSlice";
import {useEffect, useState} from "react";
import {useDispatch, useSelector} from "react-redux";

const useSearchSuggestions = searchString => {

    const [suggestions, setSuggestions] = useState([]);
    const dispatch = useDispatch();

    const searchCache = useSelector(store => store.search);

    const getSearchSuggestions = async () => {
        try {
            const response = await fetch(`/api/search?q=${searchString}`);
            if (!response.ok) {
                throw new Error('Network response was not ok.');
            }
            const json = await response.json();
            setSuggestions(json[1]);
            dispatch(cacheResults({
                [searchString]: json[1],
            }));
        } catch (error) {
            console.error('Error fetching search suggestions:', error);
        }
    }

    useEffect(() => {
        const timer = setTimeout(
            () => {
                if (searchCache[searchString]) {
                    setSuggestions(searchCache[searchString]);
                } else {
                    getSearchSuggestions();
                }
            }, 200);
        return () => clearTimeout(timer);
    }, [searchString])

    return suggestions;
}

export default useSearchSuggestions;

================
File: src/utils/viewCount.js
================
export const formatViewCount = (viewCount) => {
    if (viewCount >= 1_000_000_000) {
        return (viewCount / 1_000_000_000).toFixed(1) + 'B';
    } else if (viewCount >= 1_000_000) {
        return (viewCount / 1_000_000).toFixed(1) + 'M';
    } else if (viewCount >= 1_000) {
        return (viewCount / 1_000).toFixed(1) + 'K';
    }
    return viewCount.toString();
};

================
File: src/App.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/App.js
================
import {Provider} from "react-redux";
import "./App.css";
import store from "./utils/store";
import {createBrowserRouter, RouterProvider} from "react-router-dom";
import MainContainer from "./components/MainContainer";
import WatchPage from "./components/WatchPage";
import AppLayout from "./components/AppLayout";
import SearchResults from "./components/SearchResults";
import InfiniteScrollComponent from "./components/InfiniteScrollComponent";

const appRouter = createBrowserRouter([
    {
        path: "/",
        element: <AppLayout/>,
        children: [
            {
                path: "/",
                element: <MainContainer/>,
            },
            {
                path: "/watch",
                element: <WatchPage/>,
            },
            {
                path: "/results",
                element: <SearchResults/>,
            },
            {
                path: "/infinite",
                element: <InfiniteScrollComponent/>,
            }
        ],
    },
]);

function App() {
    return (
        <Provider store={store}>
            <div>
                <RouterProvider router={appRouter}/>
            </div>
        </Provider>
    );
}

export default App;

================
File: src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <App />
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/server.js
================
const express = require('express');
const app = express();
const PORT = 3001;

app.get('/api/search', async (req, res) => {
    const searchQuery = req.query.q;
    const apiUrl = `http://suggestqueries.google.com/complete/search?client=firefox&ds=yt&q=${searchQuery}`;
    try {
        const fetch = (await import('node-fetch')).default;
        const response = await fetch(apiUrl);
        if (!response.ok) {
            throw new Error('Network response was not ok.');
        }
        const data = await response.json();
        res.json(data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.listen(PORT, () => {
    console.log(`Proxy server is running on http://localhost:${PORT}`);
});

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "my-youtube",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@reduxjs/toolkit": "^2.3.0",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "express": "^4.21.1",
    "node-fetch": "^3.3.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-redux": "^9.1.2",
    "react-router-dom": "^6.27.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "tailwindcss": "^3.4.14"
  },
  "proxy": "http://localhost:3001"
}

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
